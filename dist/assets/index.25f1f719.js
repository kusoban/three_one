import{G as i,S as e,T as o,a as t,R as n,D as a,V as s,M as d,P as r,O as m,W as w,C as c}from"./vendor.3b879859.js";new i;const u=document.querySelector("#bg"),l=new e;new o;const h=new d(new t(10,1550,1550),new n({side:a,vertexShader:"uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 projectionMatrix;uniform vec2 uFrequency;uniform float uTime;attribute vec3 position;varying float distance;void main(){vec4 modelPosition=modelMatrix*vec4(position,1.0);modelPosition.z=sin(modelPosition.x*uTime)*.5;modelPosition.x+=sin(modelPosition.y*uFrequency.y+uTime);modelPosition.z+=sin(modelPosition.y*uFrequency.y+uTime)*.5;distance=modelPosition.z;vec4 viewPosition=viewMatrix*modelPosition;vec4 projectedPosition=projectionMatrix*viewPosition;gl_Position=projectedPosition;}",fragmentShader:"precision mediump float;varying float distance;void main(){gl_FragColor=vec4(distance*1.5,distance*.3,distance*5.3+.7,1.0);}",uniforms:{uFrequency:{value:new s(10,5)},uTime:{value:0}}}));l.add(h);const v={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{v.width=window.innerWidth,v.height=window.innerHeight,P.aspect=v.width/v.height,P.updateProjectionMatrix(),p.setSize(v.width,v.height),p.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const P=new r(75,v.width/v.height,.1,100);P.position.set(.25,-.25,1),l.add(P);const g=new m(P,u);g.enableDamping=!0;const p=new w({canvas:u});p.setSize(v.width,v.height),p.setPixelRatio(Math.min(window.devicePixelRatio,2));const x=new c,f=()=>{x.getElapsedTime(),g.update(),p.render(l,P),window.requestAnimationFrame(f)};f();
